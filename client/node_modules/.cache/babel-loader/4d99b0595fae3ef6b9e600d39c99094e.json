{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // Load user\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = _ref => {\n  let {\n    name,\n    email,\n    password\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      name,\n      email,\n      password\n    });\n\n    try {\n      const res = await axios.post('/api/users', body, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUser());\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n      }\n\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    //as we r authenticating..using path api/auth\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout / Clear Profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n};","map":{"version":3,"sources":["/home/qqa0407/Dev_connector_New/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_PROFILE","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    USER_LOADED,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT,\n    CLEAR_PROFILE\n} from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n// Load user\nexport const loadUser = () => async dispatch => {\n    if (localStorage.token) {\n        setAuthToken (localStorage.token);\n    }\n \n try {\n     const res = await axios.get('/api/auth');\n     dispatch ({\n         type: USER_LOADED,\n         payload: res.data\n     });\n} catch (err) {\n    dispatch({\n        type: AUTH_ERROR\n    });\n }\n};\n\n// Register User\nexport const register = ({ name, email, password }) => async dispatch => {\n    const config = {\n        headers:  {\n            'Content-Type': 'application/json'\n        }\n    }\n    \n    const body = JSON.stringify ({ name, email, password });\n\n    try {\n        const res = await axios.post ('/api/users', body, config);\n\n        dispatch ({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        });\n\n        dispatch(loadUser());\n    } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n            errors.forEach(error => dispatch (setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: REGISTER_FAIL\n        });\n    }\n};\n\n// Login User\nexport const login = ( email, password ) => async dispatch => {\n    const config = {\n        headers:  {\n            'Content-Type': 'application/json'\n        }\n    }\n    \n    const body = JSON.stringify ({ email, password });\n\n    try {\n        //as we r authenticating..using path api/auth\n        const res = await axios.post ('/api/auth', body, config);\n\n        dispatch ({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        });\n        \n        dispatch(loadUser());\n    } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n            errors.forEach(error => dispatch (setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: LOGIN_FAIL\n        });\n    }\n};\n\n// Logout / Clear Profile\nexport const logout = () => dispatch => {\n    dispatch ({ type: LOGOUT});\n    dispatch ({ type: CLEAR_PROFILE});\n};"]},"metadata":{},"sourceType":"module"}