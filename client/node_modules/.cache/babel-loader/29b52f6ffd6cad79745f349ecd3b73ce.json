{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { CLEAR_PROFILE, GET_PROFILE, PROFILE_ERROR, UPDATE_PROFILE, ACCOUNT_DELETED, GET_PROFILES, GET_REPOS } from './types'; //Get current users profile\n\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get all profiles\n\nexport const getProfiles = () => async dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n\n  try {\n    const res = await axios.get('/api/profile');\n    dispatch({\n      type: GET_PROFILES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get profile by ID\n\nexport const getProfileById = userId => async dispatch => {\n  try {\n    const res = await axios.get(`/api/profile/user/${userId}`);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get Github repos\n\nexport const getGithubRepos = username => async dispatch => {\n  try {\n    const res = await axios.get(`/api/profile/github/${username}`);\n    dispatch({\n      type: GET_REPOS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Create or update profile\n// inorder to redirect to a client side route after submit the form, we use push method. Edit enable us to know whether use creating a new profile or modifying it.\n\nexport const createProfile = function (formData, history) {\n  let edit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return async dispatch => {\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const res = await axios.post('/api/profile', formData, config);\n      dispatch({\n        type: GET_PROFILE,\n        payload: res.data\n      }); // setAlert to notify us whether profile updated or created\n\n      dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success')); //if creating means have to redirect to dashboard\n\n      if (!edit) {\n        history.push('/dashboard');\n      }\n    } catch (err) {\n      //if user forget anything tat will show in alert\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n      }\n\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  };\n}; // Add experience\n\nexport const addExperience = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.put('/api/profile/experience', formData, config);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    }); // setAlert to notify us whether profile updated or created\n\n    dispatch(setAlert('Experience Added', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    //if user forget anything tat will show in alert\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Education\n\nexport const addEducation = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.put('/api/profile/education', formData, config);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    }); // setAlert to notify us whether profile updated or created\n\n    dispatch(setAlert('Education Added', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    //if user forget anything tat will show in alert\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete Experience\n\nexport const deleteExperience = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/profile/experience/${id}`);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Experience Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete Education\n\nexport const deleteEducation = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/profile/education/${id}`);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Education Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete Account & profile\n\nexport const deleteAccount = id => async dispatch => {\n  if (window.confirm('Are you sure? This can NOT be undone!')) {\n    try {\n      await axios.delete('api/profile');\n      dispatch({\n        type: CLEAR_PROFILE\n      });\n      dispatch({\n        type: ACCOUNT_DELETED\n      });\n      dispatch(setAlert('Your Account has been permanently deleted'));\n    } catch (err) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  }\n}; //res.set('Access-Control-Allow-Origin', 'http://localhost:3000');\n// { mode: 'cors' }","map":{"version":3,"sources":["/home/qqa0407/Dev_connector_New/client/src/actions/profile.js"],"names":["axios","setAlert","CLEAR_PROFILE","GET_PROFILE","PROFILE_ERROR","UPDATE_PROFILE","ACCOUNT_DELETED","GET_PROFILES","GET_REPOS","getCurrentProfile","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","getProfiles","getProfileById","userId","getGithubRepos","username","createProfile","formData","history","edit","config","headers","post","push","errors","forEach","error","addExperience","put","addEducation","deleteExperience","id","delete","deleteEducation","deleteAccount","window","confirm"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\n\nimport {\n    CLEAR_PROFILE,\n    GET_PROFILE,\n    PROFILE_ERROR,\n    UPDATE_PROFILE,\n    ACCOUNT_DELETED,\n    GET_PROFILES,\n    GET_REPOS\n} from './types';\n\n//Get current users profile\nexport const getCurrentProfile = () => async dispatch => {\n    try {\n        const res = await axios.get('/api/profile/me');\n\n        dispatch ({\n            type: GET_PROFILE,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch ({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status}\n        });\n    }\n};\n\n// Get all profiles\nexport const getProfiles = () => async dispatch => {\n    dispatch ({ type: CLEAR_PROFILE});\n\n    try {\n        const res = await axios.get('/api/profile');\n\n        dispatch ({\n            type: GET_PROFILES,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch ({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status}\n        });\n    }\n};\n\n// Get profile by ID\nexport const getProfileById = userId => async dispatch => {\n    try {\n        const res = await axios.get(`/api/profile/user/${userId}`);\n\n        dispatch ({\n            type: GET_PROFILE,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch ({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status}\n        });\n    }\n};\n\n// Get Github repos\nexport const getGithubRepos = username => async dispatch => {\n    try {\n        const res = await axios.get(`/api/profile/github/${username}`);\n\n        dispatch ({\n            type: GET_REPOS,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch ({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status}\n        });\n    }\n};\n\n// Create or update profile\n// inorder to redirect to a client side route after submit the form, we use push method. Edit enable us to know whether use creating a new profile or modifying it.\nexport const createProfile =(formData, history, edit= false) => async dispatch => {\n    try  {\n        const config = {\n            headers: {\n                'Content-Type' : 'application/json'\n            }\n        }\n\n        const res = await axios.post('/api/profile', formData, config);\n        dispatch ({\n            type: GET_PROFILE,\n            payload: res.data\n        });\n        // setAlert to notify us whether profile updated or created\n        dispatch (setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'));\n        \n        //if creating means have to redirect to dashboard\n        if(!edit) {\n            history.push ('/dashboard');\n        }\n\n    } catch (err) {\n        //if user forget anything tat will show in alert\n        const errors = err.response.data.errors;\n\n        if (errors) {\n            errors.forEach(error => dispatch (setAlert(error.msg, 'danger')));\n        }\n\n        dispatch ({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status}\n        });\n    }\n};\n\n// Add experience\nexport const addExperience = (formData, history) => async dispatch => {\n     try  {\n        const config = {\n            headers: {\n                'Content-Type' : 'application/json'\n            }\n        }\n\n        const res = await axios.put('/api/profile/experience', formData, config);\n        dispatch ({\n            type: UPDATE_PROFILE,\n            payload: res.data\n        });\n        // setAlert to notify us whether profile updated or created\n        dispatch (setAlert('Experience Added', 'success'));\n        history.push ('/dashboard');\n        \n    } catch (err) {\n        //if user forget anything tat will show in alert\n        const errors = err.response.data.errors;\n\n        if (errors) {\n            errors.forEach(error => dispatch (setAlert(error.msg, 'danger')));\n        }\n\n        dispatch ({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status}\n        });\n    }\n}\n\n// Add Education\nexport const addEducation = (formData, history) => async dispatch => {\n     try  {\n        const config = {\n            headers: {\n                'Content-Type' : 'application/json'\n            }\n        }\n\n        const res = await axios.put('/api/profile/education', formData, config);\n        dispatch ({\n            type: UPDATE_PROFILE,\n            payload: res.data\n        });\n        // setAlert to notify us whether profile updated or created\n        dispatch (setAlert('Education Added', 'success'));\n        history.push ('/dashboard');\n        \n    } catch (err) {\n        //if user forget anything tat will show in alert\n        const errors = err.response.data.errors;\n\n        if (errors) {\n            errors.forEach(error => dispatch (setAlert(error.msg, 'danger')));\n        }\n\n        dispatch ({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status}\n        });\n    }\n}\n\n// Delete Experience\nexport const deleteExperience = id => async dispatch => {\n    try {\n        const res = await axios.delete(`/api/profile/experience/${id}`);\n\n        dispatch ({\n            type: UPDATE_PROFILE,\n            payload: res.data\n        });\n\n        dispatch (setAlert('Experience Removed', 'success'));\n    } catch (err) {\n        dispatch ({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status}\n        });\n    }\n};\n\n// Delete Education\nexport const deleteEducation = id => async dispatch => {\n    try {\n        const res = await axios.delete(`/api/profile/education/${id}`);\n\n        dispatch ({\n            type: UPDATE_PROFILE,\n            payload: res.data\n        });\n\n        dispatch (setAlert('Education Removed', 'success'));\n    } catch (err) {\n        dispatch ({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status}\n        });\n    }\n};\n// Delete Account & profile\nexport const deleteAccount = id => async dispatch => {\n    if (window.confirm ('Are you sure? This can NOT be undone!')) {\n    try {\n        await axios.delete('api/profile');\n\n        dispatch ({type: CLEAR_PROFILE});\n        dispatch ({type: ACCOUNT_DELETED});\n\n        dispatch (setAlert('Your Account has been permanently deleted'));\n    } catch (err) {\n        dispatch ({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status}\n        });\n    }\n    }\n};\n\n//res.set('Access-Control-Allow-Origin', 'http://localhost:3000');\n// { mode: 'cors' }"]},"metadata":{},"sourceType":"module"}